
module Detail =
  let pub balance color a x b =
    if color is B then
      if let (R, (R, aaa, aax, aab), ax, ab) = a then
        (R, (B, aaa, aax, aab), ax, (B, ab, x, b))
      else if let (R, aa, ax, (R, aba, abx, abb)) = a then
        (R, (B, aa, ax, aba), abx, (B, abb, x, b))
      else if let (R, (R, baa, bax, bab), bx, bb) = b then
        (R, (B, a, x, baa), bax, (B, bab, bx, bb))
      else if let (R, ba, bx, (R, bba, bbx, bbb)) = b then
        (R, (B, a, x, ba), bx, (B, bba, bbx, bbb))
      else (color, a, x, b)
    else (color, a, x, b)

let pub to_list t =
  let rec collect t acc =
    if let (_, a, x, b) = t then
      x :: (acc |> collect a |> collect b)
    else acc
  collect t []

module Set =
  open Detail

  let pub impl { cmp } =
  {.help|
= RBTree.Set.impl

== SYNOPSIS

  RBTree.impl { cmp } -> { get, insert }

== DESCRIPTION
Create instance of an interface implementing a red-black tree.

=== ARGUMENTS
* _cmp_: User supplied binary function to compare values:
** `cmp x y < 0` => `x < y`
** `cmp x y = 0` => `x = y`
** `cmp x y > 0` => `x > y`

== RETURN VALUE
- _get_: `<key> <tree> -> <val>`. +
  Raises `Failure` if there is not entry with given key in a tree.
- _insert_: `(<key>, <val>) <tree> -> <tree>`
  |.help}
    let rec get x t =
      if let (_, a, y, b) = t then
        let test = cmp x y
        if test < 0 then get x a
        else if test > 0 then get x b
        else y
      else
        raise Failure

    let insert x t =
      let rec ins t =
        if let (color, a, y, b) = t then
          let test =  cmp x y
          if test < 0 then balance color (ins a) y b
          else if test > 0 then balance color a y (ins b)
          else (color, a, x, b)
        else (R, nil, x, nil)
      let (_, a, x, b) = ins t
      (B, a, x, b)

    { get, insert }


module Map =
  open Detail

  let pub impl { cmp } =
  {.help|
= RBTree.impl

== SYNOPSIS

  RBTree.Map.impl { cmp } -> { get, insert }

== DESCRIPTION
Create instance of an interface implementing a red-black tree.

=== ARGUMENTS
* _cmp_: User supplied binary function to compare keys:
** `cmp x y < 0` => `x < y`
** `cmp x y = 0` => `x = y`
** `cmp x y > 0` => `x > y`

== RETURN VALUE
- _get_: `<key> <tree> -> <val>`. +
  Raises `Failure` if there is not entry with given key in a tree.
- _insert_: `(<key>, <val>) <tree> -> <tree>`
  |.help}
    let rec get k t =
      if let (_, a, (k', v'), b) = t then
        let test = cmp k k'
        if test < 0 then get k a
        else if test > 0 then get k b
        else v'
      else
        raise Failure

    let insert (k, _ as x) t =
      let rec ins t =
        if let (color, a, (k', _ as y), b) = t then
          let test =  cmp k k'
          if test < 0 then balance color (ins a) y b
          else if test > 0 then balance color a y (ins b)
          else (color, a, x, b)
        else (R, nil, x, nil)
      let (_, a, x, b) = ins t
      (B, a, x, b)

    { get, insert }


